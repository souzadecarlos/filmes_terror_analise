{
    "type": [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = COUNTRY, y = num_filmes) +",
        "+ ",
        "  geom_bar(stat= \"Identity\") +",
        "+ ",
        "  geom_label(aes(label = round(media)))",
        "> ",
        "install.packages(\"countrycode\")",
        "Installing package into ‘C:/Users/Carlos/AppData/Local/R/win-library/4.2’\n(as ‘lib’ is unspecified)\n",
        "trying URL 'https://cran.rstudio.com/bin/windows/contrib/4.2/countrycode_1.4.0.zip'\n",
        "Content type 'application/zip'",
        " length 1250005 bytes (1.2 MB)\n",
        "downloaded 1.2 MB\n\n",
        "package ‘countrycode’ successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\Carlos\\AppData\\Local\\Temp\\RtmpygFQAk\\downloaded_packages\n",
        "> ",
        "library(countrycode)",
        "> ",
        "?countrycode",
        "> ",
        "data_raw |> ",
        "+ ",
        "  mutate(continent = countrycode(COUNTRY))",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;252m`mutate()`\u001B[39m:\u001B[22m\n\u001B[38;5;252m\u001B[33m!\u001B[38;5;252m Problem while computing `continent = countrycode(COUNTRY)`.\u001B[39m\n\u001B[1mCaused by error in \u001B[38;5;252m`countrycode()`\u001B[39m:\u001B[22m\n\u001B[33m!\u001B[39m argument \"origin\" is missing, with no default\nBacktrace:\n\u001B[90m 1. \u001B[39m\u001B[1mdplyr\u001B[22m::mutate(data_raw, continent = countrycode(COUNTRY))\n\u001B[90m 6. \u001B[39m\u001B[1mcountrycode\u001B[22m::countrycode(COUNTRY)\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  mutate(continent = countrycode(sourcevar = select(COUNTRY),",
        "+ ",
        "                                 origin = \"country.name\",",
        "+ ",
        "                                 destination = continent)) |> ",
        "+ ",
        "  View()",
        "Error in View : Problem while computing `continent = countrycode(...)`.\n",
        "> ",
        "countrycode::countrycode(sourcevar = data_raw[, \"COUNTRY\"],",
        "+ ",
        "                         origin = \"country.name\",",
        "+ ",
        "                         destination = \"continent\")",
        "Error in countrycode::countrycode(sourcevar = data_raw[, \"COUNTRY\"], origin = \"country.name\",  : \n  sourcevar must be a character or numeric vector. This error often arises when users pass a tibble (e.g., from dplyr) instead of a column vector from a data.frame (i.e., my_tbl[, 2] vs. my_df[, 2] vs. my_tbl[[2]]). This can also happen when `sourcevar` is entirely composed of `NA`, which `R` treats as entries of class logical.\n",
        "> ",
        "countrycode::countrycode(sourcevar = select(data_raw, COUNTRY),",
        "+ ",
        "                         origin = \"country.name\",",
        "+ ",
        "                         destination = \"continent\")",
        "Error in countrycode::countrycode(sourcevar = select(data_raw, COUNTRY),  : \n  sourcevar must be a character or numeric vector. This error often arises when users pass a tibble (e.g., from dplyr) instead of a column vector from a data.frame (i.e., my_tbl[, 2] vs. my_df[, 2] vs. my_tbl[[2]]). This can also happen when `sourcevar` is entirely composed of `NA`, which `R` treats as entries of class logical.\n",
        "> ",
        "countrycode::countrycode(sourcevar = select(data_raw, COUNTRY),",
        "+ ",
        "                         origin = \"iso2c\",",
        "+ ",
        "                         destination = \"country.name\")",
        "Error in countrycode::countrycode(sourcevar = select(data_raw, COUNTRY),  : \n  sourcevar must be a character or numeric vector. This error often arises when users pass a tibble (e.g., from dplyr) instead of a column vector from a data.frame (i.e., my_tbl[, 2] vs. my_df[, 2] vs. my_tbl[[2]]). This can also happen when `sourcevar` is entirely composed of `NA`, which `R` treats as entries of class logical.\n",
        "> ",
        "                                              destination = \"continent\")",
        "Error: unexpected ')' in \"                                              destination = \"continent\")\"\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!is.na(COUNTRY)) |> ",
        "+ ",
        "  mutate(continent = countrycode::countrycode(sourcevar = select(COUNTRY),",
        "+ ",
        "                                              origin = \"country.name\",",
        "+ ",
        "                                              destination = \"continent\"))",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;252m`mutate()`\u001B[39m:\u001B[22m\n\u001B[38;5;252m\u001B[33m!\u001B[38;5;252m Problem while computing `continent = countrycode::countrycode(...)`.\u001B[39m\n\u001B[1mCaused by error in \u001B[38;5;252m`UseMethod()`\u001B[39m:\u001B[22m\n\u001B[33m!\u001B[39m no applicable method for 'select' applied to an object of class \"character\"\nBacktrace:\n\u001B[90m 1. \u001B[39m\u001B[1mdplyr\u001B[22m::mutate(...)\n\u001B[90m 9. \u001B[39mdplyr::select(COUNTRY)\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!is.na(COUNTRY)) |> ",
        "+ ",
        "  mutate(continent = countrycode::countrycode(sourcevar = select(data_raw, COUNTRY),",
        "+ ",
        "                                              origin = \"country.name\",",
        "+ ",
        "                                              destination = \"continent\"))",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;252m`mutate()`\u001B[39m:\u001B[22m\n\u001B[38;5;252m\u001B[33m!\u001B[38;5;252m Problem while computing `continent = countrycode::countrycode(...)`.\u001B[39m\n\u001B[1mCaused by error in \u001B[38;5;252m`countrycode::countrycode()`\u001B[39m:\u001B[22m\n\u001B[33m!\u001B[39m sourcevar must be a character or numeric vector. This error often arises when users pass a tibble (e.g., from dplyr) instead of a column vector from a data.frame (i.e., my_tbl[, 2] vs. my_df[, 2] vs. my_tbl[[2]]). This can also happen when `sourcevar` is entirely composed of `NA`, which `R` treats as entries of class logical.\nBacktrace:\n\u001B[90m 1. \u001B[39m\u001B[1mdplyr\u001B[22m::mutate(...)\n\u001B[90m 6. \u001B[39m\u001B[1mcountrycode\u001B[22m::countrycode(...)\n\u001B[90m 7. \u001B[39m\u001B[1mbase\u001B[22m::stop(\"sourcevar must be a character or numeric vector. This error often arises when users pass a tibble (e.g., from dplyr) instead of a column vector from a data.frame (i.e., my_tbl[, 2] vs. my_df[, 2] vs. my_tbl[[2]]). This can also happen when `sourcevar` is entirely composed of `NA`, which `R` treats as entries of class logical.\")\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!is.na(COUNTRY)) |> ",
        "+ ",
        "  mutate(continent = ",
        "+ ",
        "           countrycode::countrycode(",
        "+ ",
        "             sourcevar = as.character(data_raw$COUNTRY),",
        "+ ",
        "             origin = \"country.name\",",
        "+ ",
        "             destination = \"continent\"))",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!is.na(COUNTRY)) |> ",
        "+ ",
        "  mutate(continent = ",
        "+ ",
        "           countrycode::countrycode(",
        "+ ",
        "             sourcevar = as.character(data_raw$COUNTRY),",
        "+ ",
        "             origin = \"country.name\",",
        "+ ",
        "             destination = \"region\"))",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(COUNTRY == \"Venuzuela\") |> ",
        "+ ",
        "  View()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!is.na(COUNTRY)) |> ",
        "+ ",
        "  mutate(continent = ",
        "+ ",
        "           countrycode::countrycode(",
        "+ ",
        "             sourcevar = as.character(data_raw$COUNTRY),",
        "+ ",
        "             origin = \"country.name\",",
        "+ ",
        "             destination = \"region\")) |> ",
        "+ ",
        "  filter(COUNTRY == \"Brazil\") |> ",
        "+ ",
        "  View()",
        "Warning in View :\n  Some values were not matched unambiguously: Venuzuela\n\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "   ",
        "+ ",
        "  mutate(continent = ",
        "+ ",
        "           countrycode::countrycode(",
        "+ ",
        "             sourcevar = as.character(data_raw$COUNTRY),",
        "+ ",
        "             origin = \"country.name\",",
        "+ ",
        "             destination = \"region\")) |> ",
        "+ ",
        "  filter(COUNTRY == \"Brazil\") |> ",
        "+ ",
        "  View()",
        "Warning in View :\n  Some values were not matched unambiguously: Venuzuela\n\n",
        "> ",
        "  View()",
        "Error in View : invalid first argument\n",
        "> ",
        "",
        "> ",
        "  View()",
        "Error in View : invalid first argument\n",
        "> ",
        "",
        "> ",
        "data_raw |> ",
        "+ ",
        "  mutate(continent = ",
        "+ ",
        "           countrycode::countrycode(",
        "+ ",
        "             sourcevar = as.character(data_raw$COUNTRY),",
        "+ ",
        "             origin = \"country.name\",",
        "+ ",
        "             destination = \"region\")) |> ",
        "+ ",
        "  filter(is.na(COUNTRY)) |> ",
        "+ ",
        "  View()",
        "Warning in View :\n  Some values were not matched unambiguously: Venuzuela\n\n",
        "> ",
        "data_raw <- data_raw |> ",
        "+ ",
        "  rename(JUMPSCARES = `Jump Scares`) |> ",
        "+ ",
        "  filter(SUBGENRE != \"Documentary\") |> ",
        "+ ",
        "  filter(!is.na(COUNTRY)) |>",
        "+ ",
        "  mutate(continent = ",
        "+ ",
        "           countrycode::countrycode(",
        "+ ",
        "             sourcevar = as.character(data_raw$COUNTRY),",
        "+ ",
        "             origin = \"country.name\",",
        "+ ",
        "             destination = \"region\"))",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;252m`chr_as_locations()`\u001B[39m:\u001B[22m\n\u001B[33m!\u001B[39m Can't rename columns that don't exist.\n\u001B[31m✖\u001B[39m Column `Jump Scares` doesn't exist.\nBacktrace:\n\u001B[90m  1. \u001B[39m\u001B[1mdplyr\u001B[22m::mutate(...)\n\u001B[90m  5. \u001B[39mdplyr:::rename.data.frame(data_raw, JUMPSCARES = `Jump Scares`)\n\u001B[90m  6. \u001B[39m\u001B[1mtidyselect\u001B[22m::eval_rename(expr(c(...)), .data)\n\u001B[90m  7. \u001B[39mtidyselect:::rename_impl(...)\n\u001B[90m  8. \u001B[39mtidyselect:::eval_select_impl(...)\n     ...\n\u001B[90m 20. \u001B[39mtidyselect:::reduce_sels(node, data_mask, context_mask, init = init)\n\u001B[90m 21. \u001B[39mtidyselect:::walk_data_tree(new, data_mask, context_mask)\n\u001B[90m 22. \u001B[39mtidyselect:::as_indices_sel_impl(...)\n\u001B[90m 23. \u001B[39mtidyselect:::as_indices_impl(x, vars, call = call, strict = strict)\n\u001B[90m 24. \u001B[39m\u001B[38;5;252m\u001B[1m\u001B[94mtidyselect:::chr_as_locations(\u001B[38;5;252m\u001B[22m\u001B[39mx, vars, call = call\u001B[38;5;252m\u001B[1m\u001B[94m)\u001B[38;5;252m\u001B[22m\u001B[39m\n",
        "> ",
        "data_raw <- readxl::read_excel(\"dados/Number Party Massacre V4.0.2.xlsx\", ",
        "+ ",
        "                                sheet = \"Alphabetical\", col_types = c(\"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"text\", \"skip\", \"numeric\", ",
        "+ ",
        "                                    \"text\", \"text\", \"text\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"text\", \"text\", \"text\", ",
        "+ ",
        "                                    \"text\", \"numeric\", \"text\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"numeric\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"numeric\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"numeric\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"skip\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"skip\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"skip\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\"))",
        "> ",
        "data_raw <- data_raw |> ",
        "+ ",
        "  rename(JUMPSCARES = `Jump Scares`) |> ",
        "+ ",
        "  filter(SUBGENRE != \"Documentary\") |> ",
        "+ ",
        "  filter(!is.na(COUNTRY)) |>",
        "+ ",
        "  mutate(continent = ",
        "+ ",
        "           countrycode::countrycode(",
        "+ ",
        "             sourcevar = as.character(data_raw$COUNTRY),",
        "+ ",
        "             origin = \"country.name\",",
        "+ ",
        "             destination = \"region\"))",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;252m`mutate()`\u001B[39m:\u001B[22m\n\u001B[38;5;252m\u001B[33m!\u001B[38;5;252m Problem while computing `continent = countrycode::countrycode(...)`.\n\u001B[31m✖\u001B[38;5;252m `continent` must be size 2053 or 1, not 2997.\u001B[39m\nBacktrace:\n\u001B[90m 1. \u001B[39m\u001B[1mdplyr\u001B[22m::mutate(...)\n\u001B[90m 2. \u001B[39m\u001B[38;5;252m\u001B[1m\u001B[94mdplyr:::mutate.data.frame(\u001B[38;5;252m\u001B[22m\u001B[39mfilter(filter(rename(data_raw, JUMPSCARES = `Jump Scares`), SUBGENRE != \"Documentary\"), !is.na(\n  COUNTRY)), continent = countrycode::countrycode(sourcevar = as.character(data_raw$COUNTRY),\norigin = \"country.name\", destination = \"region\")\u001B[38;5;252m\u001B[1m\u001B[94m)\u001B[38;5;252m\u001B[22m\u001B[39m\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  rename(JUMPSCARES = `Jump Scares`) |> ",
        "+ ",
        "  filter(SUBGENRE != \"Documentary\") |> ",
        "+ ",
        "  mutate(continent = ",
        "+ ",
        "           countrycode::countrycode(",
        "+ ",
        "             sourcevar = as.character(data_raw$COUNTRY),",
        "+ ",
        "             origin = \"country.name\",",
        "+ ",
        "             destination = \"region\"))",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;252m`mutate()`\u001B[39m:\u001B[22m\n\u001B[38;5;252m\u001B[33m!\u001B[38;5;252m Problem while computing `continent = countrycode::countrycode(...)`.\n\u001B[31m✖\u001B[38;5;252m `continent` must be size 2053 or 1, not 2997.\u001B[39m\nBacktrace:\n\u001B[90m 1. \u001B[39m\u001B[1mdplyr\u001B[22m::mutate(...)\n\u001B[90m 2. \u001B[39m\u001B[38;5;252m\u001B[1m\u001B[94mdplyr:::mutate.data.frame(\u001B[38;5;252m\u001B[22m\u001B[39mfilter(rename(data_raw, JUMPSCARES = `Jump Scares`), SUBGENRE != \"Documentary\"), continent = countrycode::countrycode(\n  sourcevar = as.character(data_raw$COUNTRY), origin = \"country.name\", destination = \"region\")\u001B[38;5;252m\u001B[1m\u001B[94m)\u001B[38;5;252m\u001B[22m\u001B[39m\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  rename(JUMPSCARES = `Jump Scares`) |> ",
        "+ ",
        "  filter(SUBGENRE != \"Documentary\") |> ",
        "+ ",
        "  mutate(continent = ",
        "+ ",
        "           countrycode::countrycode(",
        "+ ",
        "             sourcevar = as.character(data_raw$COUNTRY),",
        "+ ",
        "             origin = \"country.name\",",
        "+ ",
        "             destination = \"region\")) |> ",
        "+ ",
        "  View()",
        "Error in View : Problem while computing `continent = countrycode::countrycode(...)`.\n",
        "> ",
        "View(data_raw)",
        "> ",
        "data_raw |> ",
        "+ ",
        "  rename(JUMPSCARES = `Jump Scares`) |> ",
        "+ ",
        "  filter(SUBGENRE != \"Documentary\") |> ",
        "+ ",
        "  mutate(continent = countrycode::countrycode(",
        "+ ",
        "             sourcevar = as.character(data_raw$COUNTRY),",
        "+ ",
        "             origin = \"country.name\",",
        "+ ",
        "             destination = \"region\")) |> ",
        "+ ",
        "  View()",
        "Error in View : Problem while computing `continent = countrycode::countrycode(...)`.\n",
        "> ",
        "data_raw <- readxl::read_excel(\"dados/Number Party Massacre V4.0.2.xlsx\", ",
        "+ ",
        "                                sheet = \"Alphabetical\", col_types = c(\"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"text\", \"skip\", \"numeric\", ",
        "+ ",
        "                                    \"text\", \"text\", \"text\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"text\", \"text\", \"text\", ",
        "+ ",
        "                                    \"text\", \"numeric\", \"text\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"numeric\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"numeric\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"numeric\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"skip\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"skip\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"skip\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\"))",
        "> ",
        "data_raw <- data_raw |> ",
        "+ ",
        "  rename(JUMPSCARES = `Jump Scares`) |> ",
        "+ ",
        "  filter(SUBGENRE != \"Documentary\")",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!is.na(COUNTRY)) |> ",
        "+ ",
        "  mutate(continent = ",
        "+ ",
        "           countrycode::countrycode(",
        "+ ",
        "             sourcevar = as.character(data_raw$COUNTRY),",
        "+ ",
        "             origin = \"country.name\",",
        "+ ",
        "             destination = \"region\")) |> ",
        "+ ",
        "  View()",
        "> ",
        "data_raw <- data_raw |> ",
        "+ ",
        "  filter(!is.na(COUNTRY)) |> ",
        "+ ",
        "  mutate(continent = ",
        "+ ",
        "           countrycode::countrycode(",
        "+ ",
        "             sourcevar = as.character(data_raw$COUNTRY),",
        "+ ",
        "             origin = \"country.name\",",
        "+ ",
        "             destination = \"region\"))",
        "> ",
        "data_raw |> ",
        "+ ",
        "  group_by(continent) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  View()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  group_by(continent) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  mutate(continent = forcats::fct_reorder(continent, num_movies)) |> ",
        "+ ",
        "  View()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  group_by(continent) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  mutate(continent = forcats::fct_reorder(continent, num_movies)) |> ",
        "+ ",
        "  ggplot() + ",
        "+ ",
        "  aes(x = continent, y = num_movies) |> ",
        "+ ",
        "  geom_bar(stat = \"identity\")",
        "> ",
        "data_raw |> ",
        "+ ",
        "  group_by(continent) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  mutate(continent = forcats::fct_reorder(continent, num_movies)) |> ",
        "+ ",
        "  ggplot() + ",
        "+ ",
        "  aes(x = continent, y = num_movies) |> ",
        "+ ",
        "  geom_bar(stat = \"identity\") +",
        "+ ",
        "  coord_flip()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  drop_na(!is.na(continent)) |> ",
        "+ ",
        "  group_by(continent) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE), ",
        "+ ",
        "            porcentagem = num_movies/nrow(data_raw)) |> ",
        "+ ",
        "  mutate(continent = forcats::fct_reorder(continent, num_movies)) |> ",
        "+ ",
        "  ggplot() + ",
        "+ ",
        "  aes(x = continent, y = porcentagem) |> ",
        "+ ",
        "  geom_bar(stat = \"identity\") +",
        "+ ",
        "  coord_flip()",
        "\u001B[1m\u001B[33mError\u001B[39m:\u001B[22m\n\u001B[33m!\u001B[39m object 'continent' not found\nBacktrace:\n\u001B[90m  1. \u001B[39mggplot2::ggplot(...)\n\u001B[90m 26. \u001B[39m\u001B[1mbase\u001B[22m::.handleSimpleError(...)\n\u001B[90m 27. \u001B[39m\u001B[1mrlang\u001B[22m (local) h(simpleError(msg, call))\n\u001B[90m 28. \u001B[39mhandlers[[1L]](cnd)\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!is.na(continent)) |> ",
        "+ ",
        "  group_by(continent) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE), ",
        "+ ",
        "            porcentagem = num_movies/nrow(data_raw)) |> ",
        "+ ",
        "  mutate(continent = forcats::fct_reorder(continent, num_movies)) |> ",
        "+ ",
        "  ggplot() + ",
        "+ ",
        "  aes(x = continent, y = porcentagem) |> ",
        "+ ",
        "  geom_bar(stat = \"identity\") +",
        "+ ",
        "  coord_flip()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!is.na(continent)) |> ",
        "+ ",
        "  group_by(continent) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE), ",
        "+ ",
        "            porcentagem = num_movies/nrow(data_raw)) |> ",
        "+ ",
        "  mutate(continent = forcats::fct_reorder(continent, num_movies)) |> ",
        "+ ",
        "  ggplot() + ",
        "+ ",
        "  aes(x = continent, y = porcentagem) |> ",
        "+ ",
        "  geom_bar(stat = \"identity\") +",
        "+ ",
        "  geom_label(aes(label = media)) +",
        "+ ",
        "  coord_flip()",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;252m`check_required_aesthetics()`\u001B[39m:\u001B[22m\n\u001B[33m!\u001B[39m geom_label requires the following missing aesthetics: x and y\nBacktrace:\n\u001B[90m 1. \u001B[39m\u001B[1mbase\u001B[22m (local) `<fn>`(x)\n\u001B[90m 2. \u001B[39mggplot2:::print.ggplot(x)\n\u001B[90m 4. \u001B[39mggplot2:::ggplot_build.ggplot(x)\n\u001B[90m 5. \u001B[39mggplot2 (local) by_layer(function(l, d) l$compute_geom_1(d))\n\u001B[90m 6. \u001B[39mggplot2 (local) f(l = layers[[i]], d = data[[i]])\n\u001B[90m 7. \u001B[39ml$compute_geom_1(d)\n\u001B[90m 8. \u001B[39mggplot2 (local) f(..., self = self)\n\u001B[90m 9. \u001B[39m\u001B[38;5;252m\u001B[1m\u001B[94mggplot2:::check_required_aesthetics(\u001B[38;5;252m\u001B[22m\u001B[39mself$geom$required_aes, c(names(data), names(self$aes_params)), snake_class(self$geom)\u001B[38;5;252m\u001B[1m\u001B[94m)\u001B[38;5;252m\u001B[22m\u001B[39m\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!is.na(continent)) |> ",
        "+ ",
        "  group_by(continent) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE), ",
        "+ ",
        "            porcentagem = num_movies/nrow(data_raw)) |> ",
        "+ ",
        "  mutate(continent = forcats::fct_reorder(continent, num_movies)) |> ",
        "+ ",
        "  ggplot() + ",
        "+ ",
        "  aes(x = continent, y = porcentagem) +",
        "+ ",
        "  geom_bar(stat = \"identity\") +",
        "+ ",
        "  geom_label(aes(label = media)) +",
        "+ ",
        "  coord_flip()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!is.na(continent)) |> ",
        "+ ",
        "  group_by(continent) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE), ",
        "+ ",
        "            porcentagem = num_movies/nrow(data_raw)) |> ",
        "+ ",
        "  mutate(continent = forcats::fct_reorder(continent, num_movies)) |> ",
        "+ ",
        "  ggplot() + ",
        "+ ",
        "  aes(x = continent, y = porcentagem) +",
        "+ ",
        "  geom_bar(stat = \"identity\") +",
        "+ ",
        "  geom_label(aes(label = round(media))) +",
        "+ ",
        "  coord_flip()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!continent %in% c(\"North America\", \"Europa & Central Asia\")) |> ",
        "+ ",
        "  View()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!continent %in% c(\"North America\", \"Europa & Central Asia\")) |> ",
        "+ ",
        "  group_by(CONTRY) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = COUNTRY, y = num_movies) +",
        "+ ",
        "  geom_bar()",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;252m`group_by()`\u001B[39m:\u001B[22m\n\u001B[38;5;252m\u001B[33m!\u001B[38;5;252m Must group by variables found in `.data`.\n\u001B[31m✖\u001B[38;5;252m Column `CONTRY` is not found.\u001B[39m\nBacktrace:\n\u001B[90m 1. \u001B[39mggplot2::ggplot(...)\n\u001B[90m 4. \u001B[39m\u001B[38;5;252m\u001B[1m\u001B[94mdplyr:::group_by.data.frame(\u001B[38;5;252m\u001B[22m\u001B[39mfilter(data_raw, !continent %in% c(\"North America\", \"Europa & Central Asia\")), CONTRY\u001B[38;5;252m\u001B[1m\u001B[94m)\u001B[38;5;252m\u001B[22m\u001B[39m\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!continent %in% c(\"North America\", \"Europa & Central Asia\")) |> ",
        "+ ",
        "  group_by(CONTRY) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = COUNTRY, y = num_movies) +",
        "+ ",
        "  geom_bar(stat = \"Identity\")",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;252m`group_by()`\u001B[39m:\u001B[22m\n\u001B[38;5;252m\u001B[33m!\u001B[38;5;252m Must group by variables found in `.data`.\n\u001B[31m✖\u001B[38;5;252m Column `CONTRY` is not found.\u001B[39m\nBacktrace:\n\u001B[90m 1. \u001B[39mggplot2::ggplot(...)\n\u001B[90m 4. \u001B[39m\u001B[38;5;252m\u001B[1m\u001B[94mdplyr:::group_by.data.frame(\u001B[38;5;252m\u001B[22m\u001B[39mfilter(data_raw, !continent %in% c(\"North America\", \"Europa & Central Asia\")), CONTRY\u001B[38;5;252m\u001B[1m\u001B[94m)\u001B[38;5;252m\u001B[22m\u001B[39m\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!continent %in% c(\"North America\", \"Europa & Central Asia\")) |> ",
        "+ ",
        "  group_by(COUNTRY) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = COUNTRY, y = num_movies) +",
        "+ ",
        "  geom_bar(stat = \"Identity\")",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!continent %in% c(\"North America\", \"Europa & Central Asia\")) |> ",
        "+ ",
        "  group_by(COUNTRY) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = COUNTRY, y = num_movies) +",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(COUNTRY = \"United Kingdom\") |> ",
        "+ ",
        "  View()",
        "Error in View : We detected a named input.\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(COUNTRY == \"United Kingdom\") |> ",
        "+ ",
        "  View()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!continent %in% c(\"North America\", \"Europe & Central Asia\")) |> ",
        "+ ",
        "  group_by(COUNTRY) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = COUNTRY, y = num_movies) +",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!continent %in% c(\"North America\", \"Europe & Central Asia\"),",
        "+ ",
        "         COUNTRY != \"Australia\") |> ",
        "+ ",
        "  group_by(COUNTRY) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = COUNTRY, y = num_movies) +",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!continent %in% c(\"North America\", \"Europe & Central Asia\"),",
        "+ ",
        "         COUNTRY != \"Australia\") |> ",
        "+ ",
        "  group_by(COUNTRY) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  mutate(COUNTRY = forcats::fct_reorder(COUNTRY, num_movies)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = COUNTRY, y = num_movies) +",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip() ",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!continent %in% c(\"North America\", \"Europe & Central Asia\"),",
        "+ ",
        "         COUNTRY != \"Australia\") |> ",
        "+ ",
        "  group_by(COUNTRY) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  mutate(COUNTRY = forcats::fct_reorder(COUNTRY, num_movies)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = COUNTRY, y = num_movies) +",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip() +",
        "+ ",
        "  geom_label(aes(label = media))",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!continent %in% c(\"North America\", \"Europe & Central Asia\"),",
        "+ ",
        "         COUNTRY != \"Australia\") |> ",
        "+ ",
        "  group_by(COUNTRY) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  mutate(COUNTRY = forcats::fct_reorder(COUNTRY, num_movies)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = COUNTRY, y = num_movies) +",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip() +",
        "+ ",
        "  geom_label(aes(label = round(media)))",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!continent %in% c(\"North America\", \"Europe & Central Asia\"),",
        "+ ",
        "         COUNTRY != \"Australia\") |> ",
        "+ ",
        "  group_by(COUNTRY) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  mutate(COUNTRY = forcats::fct_reorder(COUNTRY, num_movies)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = COUNTRY, y = num_movies) +",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!continent %in% c(\"North America\", \"Europe & Central Asia\"),",
        "+ ",
        "         COUNTRY != \"Australia\") |> ",
        "+ ",
        "  group_by(COUNTRY) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  filter(num_movies >= 4) |> ",
        "+ ",
        "  mutate(COUNTRY = forcats::fct_reorder(COUNTRY, num_movies)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = COUNTRY, y = num_movies) +",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!continent %in% c(\"North America\", \"Europe & Central Asia\"),",
        "+ ",
        "         COUNTRY != \"Australia\") |> ",
        "+ ",
        "  group_by(COUNTRY) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  filter(num_movies >= 4) |> ",
        "+ ",
        "  mutate(COUNTRY = forcats::fct_reorder(COUNTRY, num_movies)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = COUNTRY, y = num_movies) +",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip() +",
        "+ ",
        "  geom_label(aes(label = media))",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(!continent %in% c(\"North America\", \"Europe & Central Asia\"),",
        "+ ",
        "         COUNTRY != \"Australia\") |> ",
        "+ ",
        "  group_by(COUNTRY) |> ",
        "+ ",
        "  summarise(num_movies = n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  filter(num_movies >= 4) |> ",
        "+ ",
        "  mutate(COUNTRY = forcats::fct_reorder(COUNTRY, num_movies)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = COUNTRY, y = num_movies) +",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip() +",
        "+ ",
        "  geom_label(aes(label = round(media)))",
        "> ",
        "",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(DIRECTOR %in% top_diretores) |> ",
        "+ ",
        "  select(TITLE, DIRECTOR, YEAR, RUNTIME, AVG) |> ",
        "+ ",
        "  group_by(DIRECTOR) |>",
        "+ ",
        "  slice_max(order_by = AVG, n=1) |> ",
        "+ ",
        "  rename(",
        "+ ",
        "    \"Titulo\" = TITLE,",
        "+ ",
        "    \"Ano\" = YEAR,",
        "+ ",
        "    \"Diretor\" = DIRECTOR,",
        "+ ",
        "    \"Duracao\" = RUNTIME, ",
        "+ ",
        "    \"Media\" = AVG",
        "+ ",
        "  ) |> ",
        "+ ",
        "  arrange(factor(Diretor, levels = top_diretores)) |> ",
        "+ ",
        "  knitr::kable()",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |> ",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  filter(GENRE != \"NA\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(num = n(), nota_media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  slice_max(num, n = 5) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, nota_media)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = nota_media/10) +",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip() +",
        "+ ",
        "  scale_y_continuous(limits = c(0, 10))",
        "> ",
        "",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(DIRECTOR %in% top_diretores) |> ",
        "+ ",
        "  select(TITLE, DIRECTOR, YEAR, RUNTIME, AVG) |> ",
        "+ ",
        "  group_by(DIRECTOR) |>",
        "+ ",
        "  slice_max(order_by = AVG, n=1) |> ",
        "+ ",
        "  rename(",
        "+ ",
        "    \"Titulo\" = TITLE,",
        "+ ",
        "    \"Ano\" = YEAR,",
        "+ ",
        "    \"Diretor\" = DIRECTOR,",
        "+ ",
        "    \"Duracao\" = RUNTIME, ",
        "+ ",
        "    \"Media\" = AVG",
        "+ ",
        "  ) |> ",
        "+ ",
        "  arrange(factor(Diretor, levels = top_diretores)) |> ",
        "+ ",
        "  knitr::kable()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |> ",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  filter(GENRE != \"NA\") |> ",
        "+ ",
        "  count(GENRE) |> ",
        "+ ",
        "  slice_max(n, n = 5) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, n)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = n) |> ",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip()",
        "> ",
        "",
        "> ",
        "data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |> ",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  filter(GENRE != \"NA\") |> ",
        "+ ",
        "  count(GENRE) |> ",
        "+ ",
        "  slice_max(n, n = 5) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, n)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = n) |> ",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip()",
        "> ",
        "",
        "> ",
        "data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |> ",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  filter(GENRE != \"NA\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(num = n(), nota_media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  slice_max(num, n = 5) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, nota_media)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = nota_media/10) +",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip() +",
        "+ ",
        "  scale_y_continuous(limits = c(0, 10))",
        "> ",
        "",
        "> ",
        "data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |> ",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  filter(GENRE != \"NA\") |> ",
        "+ ",
        "  count(GENRE) |> ",
        "+ ",
        "  slice_max(n, n = 5) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, n)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = n) |> ",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip()",
        "> ",
        "",
        "> ",
        "data_raw",
        "> ",
        "data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |> ",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  filter(GENRE != \"NA\") |> ",
        "+ ",
        "  count(GENRE) |> ",
        "+ ",
        "  slice_max(n, n = 5) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, n)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = n) |> ",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip()",
        "\nRestarting R session...\n\n"
    ]
}