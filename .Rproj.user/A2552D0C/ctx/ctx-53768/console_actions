{
    "type": [
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.2.1 (2022-06-23 ucrt) -- \"Funny-Looking Kid\"\nCopyright (C) 2022 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "[Workspace loaded from D:/R/Curso-R/TCC - R- Ciencia de Dados I/.RData]\r\n\r\n",
        "> ",
        "mean(data_raw$RUNTIME, na.rm = TRUE)",
        "[1] 95.8022\n",
        "> ",
        "round(mean(data_raw$RUNTIME, na.rm = TRUE))",
        "[1] 96\n",
        "> ",
        "duracao_media <- round(mean(data_raw$RUNTIME, na.rm = TRUE))",
        "> ",
        "data_raw |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = RUNTIME) +",
        "+ ",
        "  geom_histogram(bins = 50) +",
        "+ ",
        "  geom_vline(aes(xintercept = mean(data_raw$RUNTIME, na.rm = TRUE)), ",
        "+ ",
        "                 color = \"red\") +",
        "+ ",
        "  scale_x_continuous(limits = c(0, 200)) ",
        "Error in ggplot(data_raw) : could not find function \"ggplot\"\n",
        "> ",
        "",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(showtext)",
        "> ",
        "library(patchwork)",
        "> ",
        "",
        "> ",
        "# font_add_google(\"IM Fell English SC\", \"IM Fell English SC\")",
        "> ",
        "# showtext_auto()",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "data_raw <- readxl::read_excel(\"dados/Number Party Massacre V4.0.2.xlsx\", ",
        "+ ",
        "                                sheet = \"Alphabetical\", col_types = c(\"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"text\", \"skip\", \"numeric\", ",
        "+ ",
        "                                    \"text\", \"text\", \"text\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"text\", \"text\", \"text\", ",
        "+ ",
        "                                    \"text\", \"numeric\", \"text\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"numeric\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"numeric\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"numeric\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"skip\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"skip\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"skip\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\"))",
        "> ",
        "",
        "> ",
        "data_raw <- data_raw |> ",
        "+ ",
        "  rename(JUMPSCARES = `Jump Scares`) |> ",
        "+ ",
        "  filter(SUBGENRE != \"Documentary\" | ",
        "+ ",
        "         SUBGENRE2 != \"Documentary\" |",
        "+ ",
        "         SUBGENRE3 !=\"Documentary\" |",
        "+ ",
        "         !is.na(COUNTRY))",
        "> ",
        "",
        "> ",
        "data_raw <- data_raw |> ",
        "+ ",
        "  mutate(continent = countrycode::countrycode(",
        "+ ",
        "             sourcevar = as.character(data_raw$COUNTRY),",
        "+ ",
        "             origin = \"country.name\",",
        "+ ",
        "             destination = \"region\"))",
        "> ",
        "",
        "> ",
        "cor_fundo <- \"#eeefd7\"",
        "> ",
        "fonte <- \"IM Fell English SC\"",
        "> ",
        "cor_principal <- \"#73141B\"",
        "> ",
        "cor_fonte <- \"#0A0D09\"",
        "> ",
        "",
        "> ",
        "data_raw |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = RUNTIME) +",
        "+ ",
        "  geom_histogram(bins = 50) +",
        "+ ",
        "  geom_vline(aes(xintercept = mean(data_raw$RUNTIME, na.rm = TRUE)), ",
        "+ ",
        "                 color = \"red\") +",
        "+ ",
        "  scale_x_continuous(limits = c(0, 200)) ",
        "> ",
        "duracao_media <- round(mean(data_raw$RUNTIME, na.rm = TRUE))",
        "> ",
        "data_raw |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = RUNTIME) +",
        "+ ",
        "  geom_histogram(bins = 50) +",
        "+ ",
        "  geom_vline(aes(xintercept = mean(data_raw$RUNTIME, na.rm = TRUE)), ",
        "+ ",
        "                 color = \"red\") +",
        "+ ",
        "  scale_x_continuous(limits = c(0, 200)) ",
        "> ",
        "",
        "> ",
        "duracao_media <- round(mean(data_raw$RUNTIME, na.rm = TRUE))",
        "> ",
        "",
        "> ",
        "data_raw |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = RUNTIME) +",
        "+ ",
        "  geom_histogram(bins = 50) +",
        "+ ",
        "  geom_vline(aes(xintercept = mean(data_raw$RUNTIME, na.rm = TRUE)), ",
        "+ ",
        "                 color = \"red\") +",
        "+ ",
        "  scale_x_continuous(limits = c(0, 200)) ",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "data_raw |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = RUNTIME, y = AVG) +",
        "+ ",
        "  geom_point() +",
        "+ ",
        "  coord_flip()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = RUNTIME, y = AVG) +",
        "+ ",
        "  geom_point() +",
        "+ ",
        "  coord_flip() +",
        "+ ",
        "  geom(smooth())",
        "Error in geom(smooth()) : could not find function \"geom\"\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = RUNTIME, y = AVG) +",
        "+ ",
        "  geom_point() +",
        "+ ",
        "  coord_flip() +",
        "+ ",
        "  geom_smooth()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = RUNTIME, y = AVG) +",
        "+ ",
        "  geom_point() +",
        "+ ",
        "  geom_smooth()",
        "> ",
        "",
        "> ",
        "top_diretores_velhos <- data_raw |> ",
        "+ ",
        "  filter(YEAR < 2000) |> ",
        "+ ",
        "  group_by(DIRECTOR) |> ",
        "+ ",
        "  summarise(num= n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  filter(num >= 2) |> ",
        "+ ",
        "  slice_max(media, n = 10) |> ",
        "+ ",
        "  pull(DIRECTOR)",
        "> ",
        "",
        "> ",
        "top_diretores_novos <- data_raw |> ",
        "+ ",
        "  filter(YEAR >= 2000) |> ",
        "+ ",
        "  group_by(DIRECTOR) |> ",
        "+ ",
        "  summarise(num= n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  filter(num >= 2) |> ",
        "+ ",
        "  slice_max(media, n = 10) |> ",
        "+ ",
        "  pull(DIRECTOR)",
        "> ",
        "",
        "> ",
        "top_diretores_estrangeiros <- data_raw |> ",
        "+ ",
        "  filter(!continent %in% c(\"North America\", \"Europe & Central Asia\"),",
        "+ ",
        "         COUNTRY != \"Australia\") |> ",
        "+ ",
        "  group_by(DIRECTOR) |> ",
        "+ ",
        "  summarise(num = n(), media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  filter(num >= 2) |> ",
        "+ ",
        "  slice_max(media, n = 10) |> ",
        "+ ",
        "  pull(DIRECTOR)",
        "> ",
        "",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(DIRECTOR %in% top_diretores_velhos ",
        "+ ",
        "         | DIRECTOR %in% top_diretores_novos ",
        "+ ",
        "         | DIRECTOR %in% top_diretores_estrangeiros) |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \", \", na.rm = TRUE) |> ",
        "+ ",
        "  group_by(DIRECTOR) |>",
        "+ ",
        "  slice_max(AVG, n = 1, with_ties = FALSE) |> ",
        "+ ",
        "  select(TITLE, YEAR, GENRE, DIRECTOR, RUNTIME, AVG, JUMPSCARES) |> ",
        "+ ",
        "  rename(",
        "+ ",
        "    \"Título\" = TITLE,",
        "+ ",
        "    \"Ano\" = YEAR,",
        "+ ",
        "    \"Gênero\" = GENRE,",
        "+ ",
        "    \"Diretor\" = DIRECTOR,",
        "+ ",
        "    \"Duração\" = RUNTIME,",
        "+ ",
        "    \"Nota média\" = AVG,",
        "+ ",
        "    \"Sustos\" = JUMPSCARES",
        "+ ",
        "  ) |> ",
        "+ ",
        "  arrange(desc(`Nota média`)) |> ",
        "+ ",
        "  reactable::reactable(searchable = TRUE, ",
        "+ ",
        "                       defaultPageSize = 5,",
        "+ ",
        "                       bordered = TRUE, ",
        "+ ",
        "                       highlight = TRUE,",
        "+ ",
        "                       defaultColDef = reactable::colDef(",
        "+ ",
        "                         align = \"center\",",
        "+ ",
        "                         headerStyle = list(background = \"#f7f7f8\")))",
        "> ",
        "",
        "> ",
        "# reactable::reactable(searchable = TRUE, columns = list(",
        "> ",
        "#     RATED = reactable::colDef(cell = function(value){",
        "> ",
        "#       if (value == \"R\" | value == \"TV-MA\" | value == \"X\") \"+18\"  ",
        "> ",
        "#       else if (value == \"NC-17\" | value == \"MA-17\") \"+16\"",
        "> ",
        "#       else if (value %in% c(\"PG\", \"TV-PG\", \"PG-13\", \"TV-14\")) \"+12\"",
        "> ",
        "#       else if (value %in% c(\"NR\", \"Approved\")) \"NR\"",
        "> ",
        "#       else \"Livre\"",
        "> ",
        "#     }",
        "> ",
        "#   )))",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "g1 <- data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |> ",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  filter(GENRE != \"NA\") |> ",
        "+ ",
        "  count(GENRE) |> ",
        "+ ",
        "  slice_max(n, n = 5) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, n)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = n) |> ",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip()",
        "> ",
        "",
        "> ",
        "g2 <- data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |> ",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  filter(GENRE != \"NA\", GENRE != \"Documentary\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(num = n(), nota_media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  filter(num >=20) |> ",
        "+ ",
        "  slice_max(nota_media, n = 5) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, nota_media)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = nota_media/10) +",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip() +",
        "+ ",
        "  scale_y_continuous(limits = c(0, 10))",
        "> ",
        "",
        "> ",
        "g1 / g2",
        "> ",
        "install.packages(\"knitr\")",
        "Error in install.packages : Updating loaded packages\n\nRestarting R session...\n\n"
    ]
}