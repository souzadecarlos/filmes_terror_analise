{
    "type": [
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.2.1 (2022-06-23 ucrt) -- \"Funny-Looking Kid\"\nCopyright (C) 2022 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "[Workspace loaded from D:/R/Curso-R/TCC - R- Ciencia de Dados I/.RData]\r\n\r\n",
        "> ",
        "g1 + g2",
        "Error in g1 + g2 : non-numeric argument to binary operator\n",
        "> ",
        "library(patchwork)",
        "> ",
        "g2",
        "TableGrob (12 x 9) \"layout\": 18 grobs\n",
        "> ",
        "g1 + g2",
        "Error in g1 + g2 : non-numeric argument to binary operator\n",
        "> ",
        "g1 / g2",
        "Error in g1/g2 : non-numeric argument to binary operator\n",
        "> ",
        "g1 <- data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |> ",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  filter(GENRE != \"NA\") |> ",
        "+ ",
        "  count(GENRE) |> ",
        "+ ",
        "  slice_max(n, n = 5) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, n)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = n) |> ",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip()",
        "Error in ggplot(mutate(slice_max(count(filter(separate_rows(unite(data_raw,  : \n  could not find function \"ggplot\"\n",
        "> ",
        "g1 <- data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |> ",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  filter(GENRE != \"NA\") |> ",
        "+ ",
        "  count(GENRE) |> ",
        "+ ",
        "  slice_max(n, n = 5) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, n)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = n) |> ",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip()",
        "Error in ggplot(mutate(slice_max(count(filter(separate_rows(unite(data_raw,  : \n  could not find function \"ggplot\"\n",
        "> ",
        "",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(showtext)",
        "> ",
        "library(patchwork)",
        "> ",
        "font_add_google(\"IM Fell English SC\", \"IM Fell English SC\")",
        "> ",
        "showtext_auto()",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "data_raw <- readxl::read_excel(\"dados/Number Party Massacre V4.0.2.xlsx\", ",
        "+ ",
        "                                sheet = \"Alphabetical\", col_types = c(\"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"text\", \"skip\", \"numeric\", ",
        "+ ",
        "                                    \"text\", \"text\", \"text\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"text\", \"text\", \"text\", ",
        "+ ",
        "                                    \"text\", \"numeric\", \"text\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"numeric\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"numeric\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"numeric\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"skip\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"skip\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"skip\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\"))",
        "> ",
        "",
        "> ",
        "data_raw <- data_raw |> ",
        "+ ",
        "  rename(JUMPSCARES = `Jump Scares`) |> ",
        "+ ",
        "  filter(SUBGENRE != \"Documentary\")",
        "> ",
        "",
        "> ",
        "data_raw <- data_raw |> ",
        "+ ",
        "  filter(!is.na(COUNTRY)) |> ",
        "+ ",
        "  mutate(continent = ",
        "+ ",
        "           countrycode::countrycode(",
        "+ ",
        "             sourcevar = as.character(data_raw$COUNTRY),",
        "+ ",
        "             origin = \"country.name\",",
        "+ ",
        "             destination = \"region\"))",
        "> ",
        "  ",
        "> ",
        "",
        "> ",
        "cor_fundo <- \"#eeefd7\"",
        "> ",
        "fonte <- \"IM Fell English SC\"",
        "> ",
        "cor_principal <- \"#73141B\"",
        "> ",
        "cor_fonte <- \"#0A0D09\"",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "g1 <- data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |> ",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  filter(GENRE != \"NA\") |> ",
        "+ ",
        "  count(GENRE) |> ",
        "+ ",
        "  slice_max(n, n = 5) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, n)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = n) |> ",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip()",
        "> ",
        "g2 <- data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |> ",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  filter(GENRE != \"NA\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(num = n(), nota_media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  slice_max(num, n = 5) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, nota_media)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = nota_media/10) +",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip() +",
        "+ ",
        "  scale_y_continuous(limits = c(0, 10))",
        "> ",
        "g1 + g2",
        "> ",
        "g1 / g2",
        "> ",
        "g2 <- data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |> ",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  filter(GENRE != \"NA\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(num = n(), nota_media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  slice_max(nota_media, n = 5) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, nota_media)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = nota_media/10) +",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip() +",
        "+ ",
        "  scale_y_continuous(limits = c(0, 10))",
        "> ",
        "g1 / g2",
        "> ",
        "data_raw <- data_raw |> ",
        "+ ",
        "  rename(JUMPSCARES = `Jump Scares`) |> ",
        "+ ",
        "  filter(SUBGENRE != \"Documentary\")",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;252m`chr_as_locations()`\u001B[39m:\u001B[22m\n\u001B[33m!\u001B[39m Can't rename columns that don't exist.\n\u001B[31m✖\u001B[39m Column `Jump Scares` doesn't exist.\nBacktrace:\n\u001B[90m  1. \u001B[39m\u001B[1mdplyr\u001B[22m::filter(...)\n\u001B[90m  3. \u001B[39mdplyr:::rename.data.frame(data_raw, JUMPSCARES = `Jump Scares`)\n\u001B[90m  4. \u001B[39m\u001B[1mtidyselect\u001B[22m::eval_rename(expr(c(...)), .data)\n\u001B[90m  5. \u001B[39mtidyselect:::rename_impl(...)\n\u001B[90m  6. \u001B[39mtidyselect:::eval_select_impl(...)\n     ...\n\u001B[90m 18. \u001B[39mtidyselect:::reduce_sels(node, data_mask, context_mask, init = init)\n\u001B[90m 19. \u001B[39mtidyselect:::walk_data_tree(new, data_mask, context_mask)\n\u001B[90m 20. \u001B[39mtidyselect:::as_indices_sel_impl(...)\n\u001B[90m 21. \u001B[39mtidyselect:::as_indices_impl(x, vars, call = call, strict = strict)\n\u001B[90m 22. \u001B[39m\u001B[38;5;252m\u001B[1m\u001B[94mtidyselect:::chr_as_locations(\u001B[38;5;252m\u001B[22m\u001B[39mx, vars, call = call\u001B[38;5;252m\u001B[1m\u001B[94m)\u001B[38;5;252m\u001B[22m\u001B[39m\n",
        "> ",
        "",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(showtext)",
        "> ",
        "library(patchwork)",
        "> ",
        "font_add_google(\"IM Fell English SC\", \"IM Fell English SC\")",
        "> ",
        "showtext_auto()",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "data_raw <- readxl::read_excel(\"dados/Number Party Massacre V4.0.2.xlsx\", ",
        "+ ",
        "                                sheet = \"Alphabetical\", col_types = c(\"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"text\", \"skip\", \"numeric\", ",
        "+ ",
        "                                    \"text\", \"text\", \"text\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"text\", \"text\", \"text\", ",
        "+ ",
        "                                    \"text\", \"numeric\", \"text\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"numeric\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"numeric\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"numeric\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"skip\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"skip\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"skip\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\"))",
        "> ",
        "",
        "> ",
        "data_raw <- data_raw |> ",
        "+ ",
        "  rename(JUMPSCARES = `Jump Scares`) |> ",
        "+ ",
        "  filter(SUBGENRE != \"Documentary\")",
        "> ",
        "",
        "> ",
        "data_raw <- data_raw |> ",
        "+ ",
        "  filter(!is.na(COUNTRY)) |> ",
        "+ ",
        "  mutate(continent = ",
        "+ ",
        "           countrycode::countrycode(",
        "+ ",
        "             sourcevar = as.character(data_raw$COUNTRY),",
        "+ ",
        "             origin = \"country.name\",",
        "+ ",
        "             destination = \"region\"))",
        "> ",
        "  ",
        "> ",
        "",
        "> ",
        "cor_fundo <- \"#eeefd7\"",
        "> ",
        "fonte <- \"IM Fell English SC\"",
        "> ",
        "cor_principal <- \"#73141B\"",
        "> ",
        "cor_fonte <- \"#0A0D09\"",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "g1 <- data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |> ",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  filter(GENRE != \"NA\") |> ",
        "+ ",
        "  count(GENRE) |> ",
        "+ ",
        "  slice_max(n, n = 5) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, n)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = n) |> ",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip()",
        "> ",
        "g2 <- data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |> ",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  filter(GENRE != \"NA\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(num = n(), nota_media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  slice_max(nota_media, n = 5) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, nota_media)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = nota_media/10) +",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip() +",
        "+ ",
        "  scale_y_continuous(limits = c(0, 10))",
        "> ",
        "g1 / g2",
        "> ",
        "g1 <- data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |> ",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  filter(GENRE != \"NA\") |> ",
        "+ ",
        "  count(GENRE) |> ",
        "+ ",
        "  slice_max(n, n = 10) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, n)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = n) |> ",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip()",
        "> ",
        "g2 <- data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |> ",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  filter(GENRE != \"NA\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(num = n(), nota_media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  slice_max(nota_media, n = 10) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, nota_media)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = nota_media/10) +",
        "+ ",
        "  geom_bar(stat = \"Identity\") +",
        "+ ",
        "  coord_flip() +",
        "+ ",
        "  scale_y_continuous(limits = c(0, 10))",
        "> ",
        "g1 / g2",
        "\nRestarting R session...\n\n"
    ]
}