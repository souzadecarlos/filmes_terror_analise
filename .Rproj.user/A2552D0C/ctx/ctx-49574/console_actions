{
    "type": [
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "  aes(x = RUNTIME, y = AVG) |> ",
        "+ ",
        "  geom_point(color = YEAR) +",
        "+ ",
        "  geom_label()",
        "Error in layer(data = data, mapping = mapping, stat = stat, geom = GeomPoint,  : \n  object 'YEAR' not found\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(SUBGENRE %in% top_genres, ",
        "+ ",
        "         DIRECTOR %in% top_directors | DIRECTOR %in% top_directors_new) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = RUNTIME, y = AVG) |> ",
        "+ ",
        "  geom_point() +",
        "+ ",
        "  geom_label()",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;252m`check_required_aesthetics()`\u001B[39m:\u001B[22m\n\u001B[33m!\u001B[39m geom_label requires the following missing aesthetics: x, y and label\nBacktrace:\n\u001B[90m 1. \u001B[39m\u001B[1mbase\u001B[22m (local) `<fn>`(x)\n\u001B[90m 2. \u001B[39mggplot2:::print.ggplot(x)\n\u001B[90m 4. \u001B[39mggplot2:::ggplot_build.ggplot(x)\n\u001B[90m 5. \u001B[39mggplot2 (local) by_layer(function(l, d) l$compute_geom_1(d))\n\u001B[90m 6. \u001B[39mggplot2 (local) f(l = layers[[i]], d = data[[i]])\n\u001B[90m 7. \u001B[39ml$compute_geom_1(d)\n\u001B[90m 8. \u001B[39mggplot2 (local) f(..., self = self)\n\u001B[90m 9. \u001B[39m\u001B[38;5;252m\u001B[1m\u001B[94mggplot2:::check_required_aesthetics(\u001B[38;5;252m\u001B[22m\u001B[39mself$geom$required_aes, c(names(data), names(self$aes_params)), snake_class(self$geom)\u001B[38;5;252m\u001B[1m\u001B[94m)\u001B[38;5;252m\u001B[22m\u001B[39m\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  drop_na(RUNTIME, AVG) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = RUNTIME, y = AVG/10) +",
        "+ ",
        "  geom_point(color = cor_principal) +",
        "+ ",
        "  xlab(\"Duração\") +",
        "+ ",
        "  ylab(\"Nota média\") +",
        "+ ",
        "  theme(panel.background = element_rect(fill = cor_fundo),",
        "+ ",
        "        plot.background = element_rect(fill = cor_fundo),",
        "+ ",
        "        panel.grid.major = element_blank(),",
        "+ ",
        "        panel.grid.minor = element_blank(),",
        "+ ",
        "        text = element_text(family = fonte, size = 40, color = cor_fonte),",
        "+ ",
        "        plot.title = element_text(hjust = 2, vjust = 0.5))",
        "> ",
        "data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |>",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(numMovies = n(), meanMovie = mean(AVG, na.rm = TRUE)/10) |> ",
        "+ ",
        "  filter(GENRE != \"NA\", numMovies >= 50) |> ",
        "+ ",
        "  slice_max(meanMovie, n = 10) |>",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, meanMovie)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = meanMovie) + ",
        "+ ",
        "  geom_bar(stat= \"identity\", fill = cor_principal) +",
        "+ ",
        "  ggtitle(\"Relação entre Gênero e notas médias\") +",
        "+ ",
        "  xlab(\"Gênero\") +",
        "+ ",
        "  ylab(\"Nota média\") +",
        "+ ",
        "  scale_y_continuous(limits = c(0,10)) +",
        "+ ",
        "  theme(panel.background = element_rect(fill = cor_fundo),",
        "+ ",
        "        plot.background = element_rect(fill = cor_fundo),",
        "+ ",
        "        panel.grid.major = element_blank(), ",
        "+ ",
        "        panel.grid.minor = element_blank(),",
        "+ ",
        "        text = element_text(family = fonte, size = 40, color = cor_fonte),",
        "+ ",
        "        axis.title.y = element_blank(),",
        "+ ",
        "        axis.ticks.y = element_blank(),",
        "+ ",
        "        axis.text.y = element_blank(),",
        "+ ",
        "        axis.title.x = element_blank(),",
        "+ ",
        "        plot.title = element_text(hjust = 0.5, vjust = 0.5)) +",
        "+ ",
        "  coord_flip() +",
        "+ ",
        "  geom_label(aes(label = GENRE), ",
        "+ ",
        "             hjust = -0.02, ",
        "+ ",
        "             fill = cor_fundo, ",
        "+ ",
        "             family = fonte,",
        "+ ",
        "             size = 12,",
        "+ ",
        "             label.size = NA)",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(SUBGENRE %in% top_genres, ",
        "+ ",
        "         DIRECTOR %in% top_directors | DIRECTOR %in% top_directors_new) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = RUNTIME, y = AVG) |> ",
        "+ ",
        "  geom_point() +",
        "+ ",
        "  geom_label(aes(label = TITLE))",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;252m`check_required_aesthetics()`\u001B[39m:\u001B[22m\n\u001B[33m!\u001B[39m geom_label requires the following missing aesthetics: x and y\nBacktrace:\n\u001B[90m 1. \u001B[39m\u001B[1mbase\u001B[22m (local) `<fn>`(x)\n\u001B[90m 2. \u001B[39mggplot2:::print.ggplot(x)\n\u001B[90m 4. \u001B[39mggplot2:::ggplot_build.ggplot(x)\n\u001B[90m 5. \u001B[39mggplot2 (local) by_layer(function(l, d) l$compute_geom_1(d))\n\u001B[90m 6. \u001B[39mggplot2 (local) f(l = layers[[i]], d = data[[i]])\n\u001B[90m 7. \u001B[39ml$compute_geom_1(d)\n\u001B[90m 8. \u001B[39mggplot2 (local) f(..., self = self)\n\u001B[90m 9. \u001B[39m\u001B[38;5;252m\u001B[1m\u001B[94mggplot2:::check_required_aesthetics(\u001B[38;5;252m\u001B[22m\u001B[39mself$geom$required_aes, c(names(data), names(self$aes_params)), snake_class(self$geom)\u001B[38;5;252m\u001B[1m\u001B[94m)\u001B[38;5;252m\u001B[22m\u001B[39m\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(SUBGENRE %in% top_genres, ",
        "+ ",
        "         DIRECTOR %in% top_directors | DIRECTOR %in% top_directors_new) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = RUNTIME, y = AVG) +",
        "+ ",
        "  geom_point() +",
        "+ ",
        "  geom_label(aes(label = TITLE))",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(SUBGENRE %in% top_genres, ",
        "+ ",
        "         DIRECTOR %in% top_directors | DIRECTOR %in% top_directors_new) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = RUNTIME, y = AVG) +",
        "+ ",
        "  geom_point() +",
        "+ ",
        "  geom_label(aes(label = TITLE), fill = YEAR)",
        "Error in layer(data = data, mapping = mapping, stat = stat, geom = GeomLabel,  : \n  object 'YEAR' not found\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(SUBGENRE %in% top_genres, ",
        "+ ",
        "         DIRECTOR %in% top_directors | DIRECTOR %in% top_directors_new) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = RUNTIME, y = AVG, color = YEAR) +",
        "+ ",
        "  geom_point() +",
        "+ ",
        "  geom_label(aes(label = TITLE))",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(SUBGENRE %in% top_genres, ",
        "+ ",
        "         DIRECTOR %in% top_directors | DIRECTOR %in% top_directors_new) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = RUNTIME, y = AVG) +",
        "+ ",
        "  geom_point(aes(color = YEAR)) ",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(SUBGENRE %in% top_genres, ",
        "+ ",
        "         DIRECTOR %in% top_directors | DIRECTOR %in% top_directors_new) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = RUNTIME, y = AVG) +",
        "+ ",
        "  geom_point(aes(color = YEAR))",
        "> ",
        "",
        "> ",
        "top_3_jumpscares <- data_raw |> ",
        "+ ",
        "  slice_max(JUMPSCARES, n = 2) |> ",
        "+ ",
        "  pull(JUMPSCARES)",
        "> ",
        "",
        "> ",
        "mean_jumpscares <- data_raw |> ",
        "+ ",
        "  mutate(mean = mean(JUMPSCARES))",
        "> ",
        "",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(JUMPSCARES > 0) |> ",
        "+ ",
        "  mutate(LABEL = ifelse(JUMPSCARES %in% top_3_jumpscares, TITLE, NA)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = AVG, y = JUMPSCARES) +",
        "+ ",
        "  geom_point() +",
        "+ ",
        "  ggrepel::geom_label_repel(aes(label = LABEL), ",
        "+ ",
        "                            label.size = NA, size = 7,",
        "+ ",
        "                            min.segment.length = 0)",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(SUBGENRE %in% top_genres, ",
        "+ ",
        "         DIRECTOR %in% top_directors | DIRECTOR %in% top_directors_new) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = RUNTIME, y = AVG) +",
        "+ ",
        "  geom_point(aes(color = YEAR)) +",
        "+ ",
        "  ggrepel::geom_label_repel(aes(label = TITLE))",
        "> ",
        "cor_fonte <- \"#0A0D09\"",
        "> ",
        "library(tidyverse)",
        "> ",
        "library(showtext)",
        "> ",
        "font_add_google(\"IM Fell English SC\", \"IM Fell English SC\")",
        "> ",
        "showtext_auto()",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "data_raw <- readxl::read_excel(\"dados/Number Party Massacre V4.0.2.xlsx\", ",
        "+ ",
        "                                sheet = \"Alphabetical\", col_types = c(\"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"text\", \"skip\", \"numeric\", ",
        "+ ",
        "                                    \"text\", \"text\", \"text\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"text\", \"text\", \"text\", ",
        "+ ",
        "                                    \"text\", \"numeric\", \"text\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"numeric\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"numeric\", \"numeric\", ",
        "+ ",
        "                                    \"numeric\", \"numeric\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"skip\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"skip\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\", \"skip\", \"skip\", \"skip\", \"skip\", ",
        "+ ",
        "                                    \"skip\"))",
        "> ",
        "",
        "> ",
        "data_raw <- data_raw |> ",
        "+ ",
        "  rename(JUMPSCARES = `Jump Scares`) |> ",
        "+ ",
        "  filter(SUBGENRE != \"Documentary\")",
        "> ",
        "",
        "> ",
        "cor_fundo <- \"#eeefd7\"",
        "> ",
        "fonte <- \"IM Fell English SC\"",
        "> ",
        "cor_principal <- \"#73141B\"",
        "> ",
        "cor_fonte <- \"#0A0D09\"",
        "> ",
        "top_directors <- data_raw |> ",
        "+ ",
        "  group_by(DIRECTOR) |> ",
        "+ ",
        "  summarise(media = mean(AVG, na.rm = TRUE), num = n()) |> ",
        "+ ",
        "  filter(num >= 2, DIRECTOR != \"NA\") |> ",
        "+ ",
        "  slice_max(media, n = 5) |> ",
        "+ ",
        "  pull(DIRECTOR)",
        "> ",
        "top_directors <- data_raw |> ",
        "+ ",
        "  group_by(DIRECTOR) |> ",
        "+ ",
        "  summarise(media = mean(AVG, na.rm = TRUE), num = n()) |> ",
        "+ ",
        "  filter(num >= 2, DIRECTOR != \"NA\") |> ",
        "+ ",
        "  slice_max(media, n = 5) |> ",
        "+ ",
        "  pull(DIRECTOR)",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(DIRECTOR %in% top_directors) |> ",
        "+ ",
        "  group_by(DIRECTOR) |> ",
        "+ ",
        "  summarise(media = mean(AVG, na.rm = TRUE)) |> ",
        "+ ",
        "  mutate(DIRECTOR = forcats::fct_reorder(DIRECTOR, media)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = media, y = DIRECTOR) +",
        "+ ",
        "  geom_bar(stat = \"identity\") +",
        "+ ",
        "  scale_x_continuous(limits = c(0,100))",
        "> ",
        "# top_5_genres ",
        "> ",
        "",
        "> ",
        "top_genres <- data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |>",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(numMovies = n(), meanMovie = mean(AVG, na.rm = TRUE)/10) |> ",
        "+ ",
        "  filter(GENRE != \"NA\", numMovies >= 50) |> ",
        "+ ",
        "  slice_max(meanMovie, n = 5) |> ",
        "+ ",
        "  pull(GENRE)",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |>",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(numMovies = n(), meanMovie = mean(AVG, na.rm = TRUE)/10) |> ",
        "+ ",
        "  filter(GENRE != \"NA\", numMovies >= 50) |> ",
        "+ ",
        "  slice_max(meanMovie, n = 10) |>",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, meanMovie)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = meanMovie) + ",
        "+ ",
        "  geom_bar(stat= \"identity\", fill = cor_principal) +",
        "+ ",
        "  ggtitle(\"Relação entre Gênero e notas médias\") +",
        "+ ",
        "  xlab(\"Gênero\") +",
        "+ ",
        "  ylab(\"Nota média\") +",
        "+ ",
        "  scale_y_continuous(limits = c(0,10)) +",
        "+ ",
        "  theme(panel.background = element_rect(fill = cor_fundo),",
        "+ ",
        "        plot.background = element_rect(fill = cor_fundo),",
        "+ ",
        "        panel.grid.major = element_blank(), ",
        "+ ",
        "        panel.grid.minor = element_blank(),",
        "+ ",
        "        text = element_text(family = fonte, size = 40, color = cor_fonte),",
        "+ ",
        "        axis.title.y = element_blank(),",
        "+ ",
        "        axis.ticks.y = element_blank(),",
        "+ ",
        "        axis.text.y = element_blank(),",
        "+ ",
        "        axis.title.x = element_blank(),",
        "+ ",
        "        plot.title = element_text(hjust = 0.5, vjust = 0.5)) +",
        "+ ",
        "  coord_flip() +",
        "+ ",
        "  geom_label(aes(label = GENRE), ",
        "+ ",
        "             hjust = -0.02, ",
        "+ ",
        "             fill = cor_fundo, ",
        "+ ",
        "             family = fonte,",
        "+ ",
        "             size = 12,",
        "+ ",
        "             label.size = NA)",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  View()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  group_by(DIRECTOR) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_score = mean(AVG)) |> ",
        "+ ",
        "  View()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  group_by(DIRECTOR) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_score = mean(AVG)) |> ",
        "+ ",
        "  filter(num_movies >= 2) |> ",
        "+ ",
        "  slice_max(AVG, n = 5) |> ",
        "+ ",
        "  View()",
        "Error in View : Problem while computing indices.\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  group_by(DIRECTOR) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_score = mean(AVG)) |> ",
        "+ ",
        "  filter(num_movies >= 2) |> ",
        "+ ",
        "  slice_max(AVG, n = 5)",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;252m`slice_max()`\u001B[39m:\u001B[22m\n\u001B[38;5;252m\u001B[33m!\u001B[38;5;252m Problem while computing indices.\u001B[39m\n\u001B[1mCaused by error:\u001B[22m\n\u001B[33m!\u001B[39m object 'AVG' not found\nBacktrace:\n\u001B[90m  1. \u001B[39m\u001B[1mdplyr\u001B[22m::slice_max(...)\n\u001B[90m 13. \u001B[39m\u001B[1mbase\u001B[22m::local(...)\n\u001B[90m 14. \u001B[39mbase::eval.parent(substitute(eval(quote(expr), envir)))\n\u001B[90m 15. \u001B[39mbase::eval(expr, p)\n\u001B[90m 16. \u001B[39mbase::eval(expr, p)\n\u001B[90m 17. \u001B[39mbase::eval(...)\n\u001B[90m 18. \u001B[39mbase::eval(...)\n\u001B[90m 19. \u001B[39mAVG\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  group_by(DIRECTOR) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_score = mean(AVG)) |> ",
        "+ ",
        "  filter(num_movies >= 2) |> ",
        "+ ",
        "  slice_max(mean_score, n = 5) |> ",
        "+ ",
        "  View()",
        "> ",
        "data_directors_old <- data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  group_by(DIRECTOR) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_score = mean(AVG)) |> ",
        "+ ",
        "  filter(num_movies >= 2) |> ",
        "+ ",
        "  slice_max(mean_score, n = 5)",
        "> ",
        "directors_old <- data_directors_old |> ",
        "+ ",
        "  pull(DIRECTOR)",
        "> ",
        "directors_old <- data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  group_by(DIRECTOR) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_score = mean(AVG)) |> ",
        "+ ",
        "  filter(num_movies >= 2) |> ",
        "+ ",
        "  slice_max(mean_score, n = 5)",
        "> ",
        "directors_old <- data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  group_by(DIRECTOR) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_score = mean(AVG)) |> ",
        "+ ",
        "  filter(num_movies >= 2) |> ",
        "+ ",
        "  slice_max(mean_score, n = 5) |> ",
        "+ ",
        "  pull(DIRECTOR)",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(DIRECTOR %in% directors_old) |> ",
        "+ ",
        "  View()",
        "> ",
        "()",
        "Error: unexpected ')' in \"()\"\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(DIRECTOR %in% directors_old) |> ",
        "+ ",
        "  View()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(DIRECTOR %in% directors_old) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = DIRECTOR, y = AVG) |> ",
        "+ ",
        "  geom_plot()",
        "Error in geom_plot(aes(x = DIRECTOR, y = AVG)) : \n  could not find function \"geom_plot\"\n",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(DIRECTOR %in% directors_old) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = DIRECTOR, y = AVG) +",
        "+ ",
        "  geom_plot()",
        "Error in geom_plot() : could not find function \"geom_plot\"\n",
        "> ",
        "library(tidyverse)",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(DIRECTOR %in% directors_old) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = DIRECTOR, y = AVG) +",
        "+ ",
        "  geom_boxplot()",
        "> ",
        "directors_old <- data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  group_by(DIRECTOR) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_score = mean(AVG)) |> ",
        "+ ",
        "  filter(num_movies >= 2) |> ",
        "+ ",
        "  slice_max(mean_score, n = 10) |> ",
        "+ ",
        "  pull(DIRECTOR)",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(DIRECTOR %in% directors_old) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = DIRECTOR, y = AVG) +",
        "+ ",
        "  geom_boxplot()",
        "> ",
        "directors_old <- data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  group_by(DIRECTOR) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_score = mean(AVG)) |> ",
        "+ ",
        "  filter(num_movies >= 2) |> ",
        "+ ",
        "  slice_max(mean_score, n = 5) |> ",
        "+ ",
        "  pull(DIRECTOR)",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(DIRECTOR %in% directors_old) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = DIRECTOR, y = AVG) +",
        "+ ",
        "  geom_boxplot()",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(DIRECTOR %in% directors_old) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = DIRECTOR, y = AVG) +",
        "+ ",
        "  geom_boxplot() +",
        "+ ",
        "  coord_flip()",
        "> ",
        "old_genres <- data_raw |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |>",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(numMovies = n(), meanMovie = mean(AVG, na.rm = TRUE)/10) |> ",
        "+ ",
        "  View() ",
        "> ",
        "old_genres <- data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |>",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(numMovies = n(), meanMovie = mean(AVG, na.rm = TRUE)/10) |> ",
        "+ ",
        "  View() ",
        "> ",
        "old_genres <- data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |>",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(numMovies = n(), meanMovie = mean(AVG, na.rm = TRUE)/10) |> ",
        "+ ",
        "  drop_na(GENRE) |> ",
        "+ ",
        "  View() ",
        "> ",
        "old_genres <- data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |>",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(numMovies = n(), meanMovie = mean(AVG, na.rm = TRUE)/10) |> ",
        "+ ",
        "  filter(GENRE != \"NA\") |> ",
        "+ ",
        "  View() ",
        "> ",
        "old_genres <- data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |>",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(numMovies = n(), meanMovie = mean(AVG, na.rm = TRUE)/10) |> ",
        "+ ",
        "  filter(GENRE != \"NA\", GENRE != \"B/W\") |> ",
        "+ ",
        "  View() ",
        "> ",
        "old_genres <- data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |>",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_movies = mean(AVG, na.rm = TRUE)/10) |> ",
        "+ ",
        "  filter(GENRE != \"NA\", GENRE != \"B/W\", num_movies >= 5) |> ",
        "+ ",
        "  View() ",
        "> ",
        "old_genres <- data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |>",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_movies = mean(AVG, na.rm = TRUE)/10) |> ",
        "+ ",
        "  filter(GENRE != \"NA\", GENRE != \"B/W\", num_movies >= 5) |> ",
        "+ ",
        "  slice_max(mean_movies, n = 10)",
        "> ",
        "  pull(old_genres)",
        " [1] 8.380000 8.074444 8.032143 7.518000 7.407639 7.358333 7.320000 7.308929 7.301190 7.081944\n",
        "> ",
        "old_genres <- data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |>",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_movies = mean(AVG, na.rm = TRUE)/10) |> ",
        "+ ",
        "  filter(GENRE != \"NA\", GENRE != \"B/W\", num_movies >= 5) |> ",
        "+ ",
        "  slice_max(mean_movies, n = 10) |> ",
        "+ ",
        "  pull(GENRE)",
        "> ",
        "old_genres",
        " [1] \"Slasher\"       \"Psychological\" \"Thriller\"      \"Crime\"         \"Occult\"       \n [6] \"Anthology\"     \"Spirits\"       \"Silent\"        \"Gothic\"        \"Comedy\"       \n",
        "> ",
        " data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |>",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_movies = mean(AVG, na.rm = TRUE)/10) |> ",
        "+ ",
        "  filter(GENRE != \"NA\", GENRE != \"B/W\", num_movies >= 5) |> ",
        "+ ",
        "  slice_max(mean_movies, n = 10) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = mean_movies) +",
        "+ ",
        "  geom_bar()",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;252m`f()`\u001B[39m:\u001B[22m\n\u001B[33m!\u001B[39m stat_count() can only have an x or y aesthetic.\nBacktrace:\n\u001B[90m  1. \u001B[39m\u001B[1mbase\u001B[22m (local) `<fn>`(x)\n\u001B[90m  2. \u001B[39mggplot2:::print.ggplot(x)\n\u001B[90m  4. \u001B[39mggplot2:::ggplot_build.ggplot(x)\n\u001B[90m  5. \u001B[39mggplot2 (local) by_layer(function(l, d) l$compute_statistic(d, layout))\n\u001B[90m  6. \u001B[39mggplot2 (local) f(l = layers[[i]], d = data[[i]])\n\u001B[90m  7. \u001B[39ml$compute_statistic(d, layout)\n\u001B[90m  8. \u001B[39mggplot2 (local) f(..., self = self)\n\u001B[90m  9. \u001B[39mself$stat$setup_params(data, self$stat_params)\n\u001B[90m 10. \u001B[39mggplot2 (local) \u001B[38;5;252m\u001B[1m\u001B[94mf(\u001B[38;5;252m\u001B[22m\u001B[39m...\u001B[38;5;252m\u001B[1m\u001B[94m)\u001B[38;5;252m\u001B[22m\u001B[39m\n",
        "> ",
        " data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |>",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_movies = mean(AVG, na.rm = TRUE)/10) |> ",
        "+ ",
        "  filter(GENRE != \"NA\", GENRE != \"B/W\", num_movies >= 5) |> ",
        "+ ",
        "  slice_max(mean_movies, n = 10) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = mean_movies) +",
        "+ ",
        "  geom_bar(stat = \"Identity\")",
        "> ",
        " data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |>",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_movies = mean(AVG, na.rm = TRUE)/10) |> ",
        "+ ",
        "  filter(GENRE != \"NA\", GENRE != \"B/W\", num_movies >= 5) |> ",
        "+ ",
        "  slice_max(mean_movies, n = 10) |> ",
        "+ ",
        "  forcats::fct_reorder(GENRE, mean_movies) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = mean_movies) +",
        "+ ",
        "  geom_bar(stat = \"Identity\")",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;252m`forcats::fct_reorder()`\u001B[39m:\u001B[22m\n\u001B[38;5;252m\u001B[33m!\u001B[38;5;252m `.f` must be a factor or character vector, not a data frame\u001B[39m\nBacktrace:\n\u001B[90m 1. \u001B[39mggplot2::ggplot(...)\n\u001B[90m 2. \u001B[39m\u001B[38;5;252m\u001B[1m\u001B[94mforcats::fct_reorder(\u001B[38;5;252m\u001B[22m\u001B[39mslice_max(filter(summarise(group_by(separate_rows(unite(filter(data_raw, YEAR <= 1970), GENRE,\nSUBGENRE:SUBGENRE3, sep = \",\"), GENRE, sep = \",\"), GENRE), num_movies = n(), mean_movies = mean(\n  AVG, na.rm = TRUE) / 10), GENRE != \"NA\", GENRE != \"B/W\", num_movies >= 5), mean_movies, n = 10),\nGENRE, mean_movies\u001B[38;5;252m\u001B[1m\u001B[94m)\u001B[38;5;252m\u001B[22m\u001B[39m\n",
        "> ",
        " data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |>",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_movies = mean(AVG, na.rm = TRUE)/10) |> ",
        "+ ",
        "  filter(GENRE != \"NA\", GENRE != \"B/W\", num_movies >= 5) |> ",
        "+ ",
        "  slice_max(mean_movies, n = 10) |> ",
        "+ ",
        "  forcats::fct_reorder(GENRE, -mean_movies) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = mean_movies) +",
        "+ ",
        "  geom_bar(stat = \"Identity\")",
        "\u001B[1m\u001B[33mError\u001B[39m in \u001B[38;5;252m`forcats::fct_reorder()`\u001B[39m:\u001B[22m\n\u001B[38;5;252m\u001B[33m!\u001B[38;5;252m `.f` must be a factor or character vector, not a data frame\u001B[39m\nBacktrace:\n\u001B[90m 1. \u001B[39mggplot2::ggplot(...)\n\u001B[90m 2. \u001B[39m\u001B[38;5;252m\u001B[1m\u001B[94mforcats::fct_reorder(\u001B[38;5;252m\u001B[22m\u001B[39mslice_max(filter(summarise(group_by(separate_rows(unite(filter(data_raw, YEAR <= 1970), GENRE,\nSUBGENRE:SUBGENRE3, sep = \",\"), GENRE, sep = \",\"), GENRE), num_movies = n(), mean_movies = mean(\n  AVG, na.rm = TRUE) / 10), GENRE != \"NA\", GENRE != \"B/W\", num_movies >= 5), mean_movies, n = 10),\nGENRE, -mean_movies\u001B[38;5;252m\u001B[1m\u001B[94m)\u001B[38;5;252m\u001B[22m\u001B[39m\n",
        "> ",
        " data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |>",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_movies = mean(AVG, na.rm = TRUE)/10) |> ",
        "+ ",
        "  filter(GENRE != \"NA\", GENRE != \"B/W\", num_movies >= 5) |> ",
        "+ ",
        "  slice_max(mean_movies, n = 10) ",
        "> ",
        "  geom_bar(stat = \"Identity\")",
        "geom_bar: width = NULL, na.rm = FALSE, orientation = NA\nstat_identity: na.rm = FALSE\nposition_stack \n",
        "> ",
        "  geom_bar(stat = \"Identity\")",
        "geom_bar: width = NULL, na.rm = FALSE, orientation = NA\nstat_identity: na.rm = FALSE\nposition_stack \n",
        "> ",
        "  geom_bar(stat = \"identity\")",
        "geom_bar: width = NULL, na.rm = FALSE, orientation = NA\nstat_identity: na.rm = FALSE\nposition_stack \n",
        "> ",
        " data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |>",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_movies = mean(AVG, na.rm = TRUE)/10) |> ",
        "+ ",
        "  filter(GENRE != \"NA\", GENRE != \"B/W\", num_movies >= 5) |> ",
        "+ ",
        "  slice_max(mean_movies, n = 10) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, -mean_movies) |> ",
        "+ ",
        "  ggplot()",
        "+ ",
        " data_raw |> ",
        "Error: unexpected symbol in:\n\"  ggplot()\n data_raw\"\n",
        "> ",
        " data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |>",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_movies = mean(AVG, na.rm = TRUE)/10) |> ",
        "+ ",
        "  filter(GENRE != \"NA\", GENRE != \"B/W\", num_movies >= 5) |> ",
        "+ ",
        "  slice_max(mean_movies, n = 10) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, -mean_movies)) |> ",
        "+ ",
        "  ggplot() ",
        "> ",
        " data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  unite(GENRE, SUBGENRE:SUBGENRE3, sep = \",\") |>",
        "+ ",
        "  separate_rows(GENRE, sep = \",\") |> ",
        "+ ",
        "  group_by(GENRE) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_movies = mean(AVG, na.rm = TRUE)/10) |> ",
        "+ ",
        "  filter(GENRE != \"NA\", GENRE != \"B/W\", num_movies >= 5) |> ",
        "+ ",
        "  slice_max(mean_movies, n = 10) |> ",
        "+ ",
        "  mutate(GENRE = forcats::fct_reorder(GENRE, -mean_movies)) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = GENRE, y = mean_movies) +",
        "+ ",
        "  geom_bar(stat = \"identity\")",
        "> ",
        "directors_old <- data_raw |> ",
        "+ ",
        "  filter(YEAR > 1970 & YEAR <= 2000) |> ",
        "+ ",
        "  group_by(DIRECTOR) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_score = mean(AVG)) |> ",
        "+ ",
        "  filter(num_movies >= 2) |> ",
        "+ ",
        "  slice_max(mean_score, n = 5) |> ",
        "+ ",
        "  pull(DIRECTOR)",
        "> ",
        "  ",
        "> ",
        "",
        "> ",
        "data_raw |> ",
        "+ ",
        "  filter(DIRECTOR %in% directors_old) |> ",
        "+ ",
        "  ggplot() +",
        "+ ",
        "  aes(x = DIRECTOR, y = AVG) +",
        "+ ",
        "  geom_boxplot() +",
        "+ ",
        "  coord_flip()",
        "> ",
        "directors_old <- data_raw |> ",
        "+ ",
        "  filter(YEAR <= 1970) |> ",
        "+ ",
        "  group_by(DIRECTOR) |> ",
        "+ ",
        "  summarise(num_movies = n(), mean_score = mean(AVG)) |> ",
        "+ ",
        "  filter(num_movies >= 2) |> ",
        "+ ",
        "  slice_max(mean_score, n = 5) |> ",
        "+ ",
        "  pull(DIRECTOR)",
        "\nRestarting R session...\n\n"
    ]
}