scale_y_continuous(format(scientific = TRUE)) +
theme(axis.title.y = element_blank(),
text = element_text(size = 26, family = fonte))
theme(axis.title.y = element_blank(),
text = element_text(size = 26, family = fonte))
theme(axis.title.y = element_blank(),
text = element_text(size = 26, family = fonte))
options(scipen=10000)
left_join(data_raw, imdb) |>
filter(!is.na(numVotes)) |>
unite(GENRE, SUBGENRE:SUBGENRE3, sep = ",") |>
separate_rows(GENRE, sep = ",") |>
filter(GENRE != "NA") |>
group_by(GENRE) |>
summarise(num_votos = sum(numVotes),
num_filmes = n(),
media_filmes = mean(AVG),
votos_medios = num_votos/num_filmes) |>
slice_max(votos_medios, n = 10) |>
mutate(GENRE = forcats::fct_reorder(GENRE, votos_medios)) |>
ggplot() +
aes(x = GENRE, y = votos_medios) +
geom_bar(stat = "Identity", fill = cor_principal) +
coord_flip() +
ylab("Votos médios por filme") +
ggthemes::theme_tufte() +
theme(axis.title.y = element_blank(),
text = element_text(size = 26, family = fonte))
data_raw |>
ggplot() +
aes(x = RUNTIME, y = AVG/10) +
geom_point(color = cor_principal) +
geom_smooth(color = "#BF343D") +
xlab("Duracão (min)") +
ylab("Nota média") +
ggthemes::theme_tufte() +
theme(text = element_text(size = 26, family = fonte))
data_raw |>
ggplot() +
aes(x = JUMPSCARES) +
geom_histogram(bins = 30, fill = cor_principal) +
geom_vline(aes(xintercept = mean(data_raw$JUMPSCARES, na.rm = TRUE)),
color = "black") +
xlab("Sustos") +
ylab("Contagem") +
ggthemes::theme_tufte() +
theme(text = element_text(size = 26, family = fonte))
data_raw |>
group_by(JUMPSCARES) |>
summarise(media = mean(AVG, na.rm = TRUE)) |>
ggplot() +
aes(x = JUMPSCARES, y = media/10) +
geom_point(color = cor_principal) +
geom_smooth(color = "#BF343D") +
xlab("Sustos") +
ylab("Nota média") +
scale_y_continuous(limit = c(0, 10)) +
ggthemes::theme_tufte() +
theme(text = element_text(size = 26, family = fonte))
library(patchwork)
p1 <- data_raw |>
unite(GENRE, SUBGENRE:SUBGENRE3, sep = ",") |>
separate_rows(GENRE, sep = ",") |>
filter(GENRE != "NA", !is.na(JUMPSCARES)) |>
group_by(GENRE) |>
summarise(num_filmes = n(), num_sustos = mean(JUMPSCARES, na.rm = TRUE)) |>
filter(num_filmes > 5) |>
slice_max(num_sustos, n = 5) |>
mutate(GENRE = forcats::fct_reorder(GENRE, num_sustos)) |>
ggplot() +
aes(x = GENRE, y = num_sustos) +
geom_bar(stat = "Identity", fill = cor_principal) +
scale_y_continuous(limits = c(0, 15)) +
coord_flip() +
ylab(element_blank()) +
xlab(element_blank()) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank()) +
ggthemes::theme_tufte() +
theme(text = element_text(size = 26, family = fonte))
# text = element_text(size = 20))
p2 <- data_raw |>
unite(GENRE, SUBGENRE:SUBGENRE3, sep = ",") |>
separate_rows(GENRE, sep = ",") |>
filter(GENRE != "NA", !is.na(JUMPSCARES)) |>
group_by(GENRE) |>
summarise(num_filmes = n() , num_sustos = mean(JUMPSCARES, na.rm = TRUE)) |>
filter(num_filmes > 5) |>
slice_min(num_sustos, n = 5) |>
mutate(GENRE = forcats::fct_reorder(GENRE, num_sustos)) |>
ggplot() +
aes(x = GENRE, y = num_sustos) +
geom_bar(stat = "Identity", fill = cor_principal) +
scale_y_continuous(limits = c(0, 15)) +
coord_flip() +
ylab("Numero de sustos") +
xlab(element_blank()) +
theme(axis.title.y = element_blank()) +
ggthemes::theme_tufte() +
theme(text = element_text(size = 26, family = fonte))
# text = element_text(size = 20))
p1 / p2
top_diretores_velhos <- data_raw |>
filter(YEAR < 2000) |>
group_by(DIRECTOR) |>
summarise(num= n(), media = mean(AVG, na.rm = TRUE)) |>
filter(num >= 2) |>
slice_max(media, n = 10) |>
pull(DIRECTOR)
top_diretores_novos <- data_raw |>
filter(YEAR >= 2000) |>
group_by(DIRECTOR) |>
summarise(num= n(), media = mean(AVG, na.rm = TRUE)) |>
filter(num >= 2) |>
slice_max(media, n = 10) |>
pull(DIRECTOR)
top_diretores_estrangeiros <- data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
group_by(DIRECTOR) |>
summarise(num = n(), media = mean(AVG, na.rm = TRUE)) |>
filter(num >= 2) |>
slice_max(media, n = 10) |>
pull(DIRECTOR)
data_raw |>
filter(DIRECTOR %in% top_diretores_velhos
| DIRECTOR %in% top_diretores_novos
| DIRECTOR %in% top_diretores_estrangeiros) |>
unite(GENRE, SUBGENRE:SUBGENRE3, sep = ", ", na.rm = TRUE) |>
group_by(DIRECTOR) |>
slice_max(AVG, n = 1, with_ties = FALSE) |>
select(TITLE, YEAR, GENRE, DIRECTOR, RUNTIME, AVG, JUMPSCARES) |>
rename(
"Título" = TITLE,
"Ano" = YEAR,
"Gênero" = GENRE,
"Diretor" = DIRECTOR,
"Duração" = RUNTIME,
"Nota média" = AVG,
"Sustos" = JUMPSCARES
) |>
arrange(desc(`Nota média`)) |>
reactable::reactable(searchable = TRUE,
defaultPageSize = 5,
bordered = TRUE,
highlight = TRUE,
defaultColDef = reactable::colDef(
align = "center",
headerStyle = list(background = "#f7f7f8")))
# reactable::reactable(searchable = TRUE, columns = list(
#     RATED = reactable::colDef(cell = function(value){
#       if (value == "R" | value == "TV-MA" | value == "X") "+18"
#       else if (value == "NC-17" | value == "MA-17") "+16"
#       else if (value %in% c("PG", "TV-PG", "PG-13", "TV-14")) "+12"
#       else if (value %in% c("NR", "Approved")) "NR"
#       else "Livre"
#     }
#   )))
data_raw |>
filter(DIRECTOR %in% top_diretores_velhos
| DIRECTOR %in% top_diretores_novos
| DIRECTOR %in% top_diretores_estrangeiros) |>
unite(GENRE, SUBGENRE:SUBGENRE3, sep = ", ", na.rm = TRUE) |>
group_by(DIRECTOR) |>
slice_max(AVG, n = 1, with_ties = FALSE) |>
select(TITLE, YEAR, GENRE, DIRECTOR, RUNTIME, AVG, JUMPSCARES) |>
rename(
"Título" = TITLE,
"Ano" = YEAR,
"Gênero" = GENRE,
"Diretor" = DIRECTOR,
"Duração" = RUNTIME,
"Nota média" = AVG,
"Sustos" = JUMPSCARES
) |>
arrange(desc(`Nota média`)) |>
reactable::reactable(searchable = TRUE,
defaultPageSize = 10,
bordered = TRUE,
highlight = TRUE,
defaultColDef = reactable::colDef(
align = "center",
headerStyle = list(background = "#f7f7f8")))
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
group_by(COUNTRY) |>
slice_max(mean(AVG, n = 1)) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
group_by(COUNTRY) |>
slice_max(AVG, n = 1) |>
View()
top_diretores_velhos <- data_raw |>
filter(YEAR < 2000) |>
group_by(DIRECTOR) |>
summarise(num= n(), media = mean(AVG, na.rm = TRUE)) |>
filter(num >= 2) |>
slice_max(media, n = 10) |>
pull(DIRECTOR)
top_diretores_novos <- data_raw |>
filter(YEAR >= 2000) |>
group_by(DIRECTOR) |>
summarise(num= n(), media = mean(AVG, na.rm = TRUE)) |>
filter(num >= 2) |>
slice_max(media, n = 10) |>
pull(DIRECTOR)
top_diretores_estrangeiros <- data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
group_by(DIRECTOR) |>
summarise(num = n(), media = mean(AVG, na.rm = TRUE)) |>
filter(num >= 2) |>
slice_max(media, n = 10) |>
pull(DIRECTOR)
data_raw |>
filter(DIRECTOR %in% top_diretores_velhos
| DIRECTOR %in% top_diretores_novos
| DIRECTOR %in% top_diretores_estrangeiros) |>
unite(GENRE, SUBGENRE:SUBGENRE3, sep = ", ", na.rm = TRUE) |>
group_by(DIRECTOR) |>
slice_max(AVG, n = 1, with_ties = FALSE) |>
select(TITLE, YEAR, GENRE, DIRECTOR, RUNTIME, AVG, JUMPSCARES) |>
rename(
"Título" = TITLE,
"Ano" = YEAR,
"Gênero" = GENRE,
"Diretor" = DIRECTOR,
"Duração" = RUNTIME,
"Nota média" = AVG,
"Sustos" = JUMPSCARES
) |>
arrange(desc(`Nota média`)) |>
reactable::reactable(searchable = TRUE,
defaultPageSize = 5,
bordered = TRUE,
highlight = TRUE,
defaultColDef = reactable::colDef(
align = "center",
headerStyle = list(background = "#f7f7f8")))
# reactable::reactable(searchable = TRUE, columns = list(
#     RATED = reactable::colDef(cell = function(value){
#       if (value == "R" | value == "TV-MA" | value == "X") "+18"
#       else if (value == "NC-17" | value == "MA-17") "+16"
#       else if (value %in% c("PG", "TV-PG", "PG-13", "TV-14")) "+12"
#       else if (value %in% c("NR", "Approved")) "NR"
#       else "Livre"
#     }
#   )))
library(tidyverse)
library(showtext)
library(patchwork)
library(showtext)
library(ggthemes)
font_add(family = "AmericanFrights", regular = "./fonts/American Frights.otf")
showtext_auto()
# font_add_google("IM Fell English SC", "IM Fell English SC")
# showtext_auto()
data_raw <- readxl::read_excel("dados/Number Party Massacre V4.0.2.xlsx",
sheet = "Alphabetical", col_types = c("skip",
"skip", "skip", "text", "skip", "numeric",
"text", "text", "text", "numeric",
"numeric", "text", "text", "text",
"text", "numeric", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "skip", "skip",
"skip", "skip", "skip", "skip", "skip",
"skip", "skip", "skip", "skip", "skip",
"skip", "skip", "skip", "skip", "skip",
"skip"))
data_raw <- data_raw |>
rename(JUMPSCARES = `Jump Scares`) |>
filter(SUBGENRE != "Documentary" |
SUBGENRE2 != "Documentary" |
SUBGENRE3 !="Documentary" |
!is.na(COUNTRY))
data_raw <- data_raw |>
mutate(continent = countrycode::countrycode(
sourcevar = as.character(data_raw$COUNTRY),
origin = "country.name",
destination = "region"))
cor_fundo <- "#eeefd7"
cor_principal <- "#73141B"
cor_fonte <- "#0A0D09"
fonte <- "AmericanFrights"
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
group_by(COUNTRY) |>
slice_max(AVG, n = 1) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
group_by(COUNTRY) |>
slice_max(AVG, n = 1) |>
count(COUNTRY) |>
slice_max(n(), n = 10) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
group_by(COUNTRY) |>
slice_max(AVG, n = 1) |>
group_bu(COUNTRY) |>
slice_max(n(), n = 10) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
group_by(COUNTRY) |>
slice_max(AVG, n = 1) |>
group_by(COUNTRY) |>
slice_max(n(), n = 10) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
group_by(COUNTRY) |>
slice_max(n()), n=1 |>
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
group_by(COUNTRY) |>
slice_max(n(), n=1) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
group_by(COUNTRY) |>
top_n(1, AVG) |>
View()
data_raw |>
count(COUNTRY) |>
slice_max(n(), n = 10) |>
View()
data_raw |>
count(COUNTRY) |>
slice_max(n, n = 10) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
count(COUNTRY) |>
slice_max(n, n = 10) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
group_by(COUNTRY) |>
top_n(1, AVG) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
count(COUNTRY) |>
slice_max(n, n = 10) |>
group_by(COUNTRY) |>
top_n(AVG, n=1) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
count(COUNTRY) |>
slice_max(n, n = 10) |>
group_by(COUNTRY) |>
top_n(1, AVG) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
count(COUNTRY) |>
slice_max(n, n = 10) |>
group_by(COUNTRY) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
count(COUNTRY) |>
slice_max(n, n = 10) |>
group_by(COUNTRY) |>
top_n(1, AVG) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
count(COUNTRY) |>
slice_max(n, n = 10) |>
group_by(COUNTRY) |>
slice_max(AVG, n = 1) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
count(COUNTRY) |>
slice_max(n, n = 10) |>
group_by(COUNTRY) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
count(COUNTRY) |>
slice_max(n, n = 10) |>
group_by(COUNTRY) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
count(COUNTRY) |>
slice_max(n, n = 10) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
group_by(COUNTRY) |>
slice_max(n, n = 10) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
group_by(COUNTRY) |>
slice_max(n, n = 10) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
count(COUNTRY) |>
slice_max(n, n = 10) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
group_by(COUNTRY) |>
summarise(n = n(), media = mean(AVG, na.rm = TRUE)) |>
arrange(desc(n), desc(media)) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
group_by(COUNTRY) |>
summarise(n = n(), media = mean(AVG, na.rm = TRUE)) |>
arrange(desc(n), desc(media)) |>
slice(n = 10) |>
View()
data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
group_by(COUNTRY) |>
summarise(n = n(), media = mean(AVG, na.rm = TRUE)) |>
arrange(desc(n), desc(media)) |>
slice_head(n = 10) |>
View()
top_10_country <- data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
group_by(COUNTRY) |>
summarise(n = n(), media = mean(AVG, na.rm = TRUE)) |>
arrange(desc(n), desc(media)) |>
slice_head(n = 10) |>
pull(COUNTRY)
data_raw |>
filter(COUNTRY %in% top_10_country) |>
View()
data_raw |>
filter(COUNTRY %in% top_10_country) |>
group_by(COUNTRY) |>
slice_max(AVG, n = 1) |>
View()
data_raw |>
filter(COUNTRY %in% top_10_country) |>
group_by(COUNTRY) |>
slice_max(AVG, n = 1) |>
knitr::kable()
data_raw |>
filter(COUNTRY %in% top_10_country) |>
group_by(COUNTRY) |>
slice_max(AVG, n = 1) |>
select(TITLE, YEAR, COUNTRY, RUNTIME, AVG) |>
knitr::kable()
data_raw |>
filter(COUNTRY %in% top_10_country) |>
group_by(COUNTRY) |>
slice_max(AVG, n = 1) |>
select(TITLE, YEAR, COUNTRY, RUNTIME, AVG) |>
rename("Título" = TITLE,
"Ano" = YEAR,
"Pais" = COUNTRY,
"Duração" = RUNTIME,
"Média" = AVG) |>
knitr::kable()
top_10_country <- data_raw |>
filter(!continent %in% c("North America", "Europe & Central Asia"),
COUNTRY != "Australia") |>
group_by(COUNTRY) |>
summarise(n = n(), media = mean(AVG, na.rm = TRUE)) |>
arrange(desc(n), desc(media)) |>
slice_head(n = 10) |>
pull(COUNTRY)
data_raw |>
filter(COUNTRY %in% top_10_country) |>
group_by(COUNTRY) |>
slice_max(AVG, n = 1) |>
select(TITLE, YEAR, COUNTRY, RUNTIME, AVG) |>
rename("Título" = TITLE,
"Ano" = YEAR,
"Pais" = COUNTRY,
"Duração" = RUNTIME,
"Média" = AVG) |>
knitr::kable()
